generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model article_guest_likes {
  guest_id   String   @db.VarChar(255) /// 游客的唯一标识符 (例如 UUID)
  article_id BigInt   @db.UnsignedBigInt /// 被点赞的文章ID
  ip_address String   @db.VarChar(45) /// 点赞时用户的IP地址
  created_at DateTime @default(now()) /// 点赞时间

  article articles @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@id([guest_id, article_id]) // 联合主键，防止同一游客重复点赞
  @@index([article_id])
}

model article_likes {
  user_id    BigInt   @db.UnsignedBigInt
  article_id BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  article    articles @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "fk_likes_article")
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_likes_user")

  @@id([user_id, article_id])
  @@index([article_id], map: "fk_likes_article")
}

model articles {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt                @db.UnsignedBigInt
  content             String                @db.Text
  type                Int                   @default(0) @db.UnsignedTinyInt // 文章类型 (0:文字, 1:图片, 2:视频)
  is_top              Boolean               @default(false) // 是否置顶
  is_ad               Boolean               @default(false) // 是否广告
  ad_title            String?               @db.VarChar(255) // 广告内容描述
  ad_url              String?               @db.VarChar(255) // 广告链接
  location            String?               @db.VarChar(50)
  status              Int                   @default(0) @db.UnsignedTinyInt
  like_count          Int                   @default(0) @db.UnsignedInt
  comment_count       Int                   @default(0) @db.UnsignedInt
  published_at        DateTime?             @db.Timestamp(0)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime              @default(now()) @updatedAt @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  // 关系字段（一篇文章属于一个用户），指向users的关系
  user                users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_articles_user")
  // 反向关系字段（一篇文章可以有多个评论、喜欢）
  article_images      article_images[]
  article_videos      article_videos[]
  comments            comments[]
  article_likes       article_likes[]
  article_guest_likes article_guest_likes[]
  tags                article_tags[]

  @@index([is_top, status, deleted_at])
  @@index([is_ad])
  @@index([status, published_at], map: "idx_status_published")
  @@index([user_id], map: "idx_user_id")
}

model article_images {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt?  @db.UnsignedBigInt
  image_url  String   @db.VarChar(255)
  sort_order Int      @default(0) @db.UnsignedTinyInt
  created_at DateTime @default(now())

  article articles? @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_id])
}

model article_videos {
  id            BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  article_id    BigInt?  @db.UnsignedBigInt
  video_url     String   @db.VarChar(255)
  thumbnail_url String?  @db.VarChar(255) // 视频封面
  duration      Int? //视频时长
  sort_order    Int      @default(0) @db.UnsignedTinyInt
  created_at    DateTime @default(now())

  article articles? @relation(fields: [article_id], references: [id], onDelete: SetNull)

  @@index([article_id])
}

model comments {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt     @db.UnsignedBigInt
  user_id    BigInt     @db.UnsignedBigInt
  parent_id  BigInt?    @db.UnsignedBigInt
  content    String     @db.Text
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  // 关系字段
  article    articles   @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "fk_comments_article")
  parent     comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, map: "fk_comments_parent")
  replies    comments[] @relation("commentsTocomments")
  user       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_comments_user")

  @@index([article_id], map: "idx_article_id")
  @@index([parent_id], map: "idx_parent_id")
  @@index([user_id], map: "idx_user_id")
}

model logs {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt?  @db.UnsignedBigInt
  action      String   @db.VarChar(50)
  target_type String?  @db.VarChar(50)
  target_id   BigInt?  @db.UnsignedBigInt
  details     Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  status      String   @default("SUCCESS") @db.VarChar(20)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  user        users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "fk_logs_user")

  @@index([action], map: "idx_action")
  @@index([created_at], map: "idx_created_at")
  @@index([target_type, target_id], map: "idx_target")
  @@index([user_id], map: "idx_user_id")
}

// 用户表
model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  username          String    @unique(map: "uk_username") @db.VarChar(30)
  password          String    @db.VarChar(255)
  nickname          String?   @db.VarChar(50)
  brief             String?   @db.VarChar(255)
  role              Int       @default(0) @db.UnsignedTinyInt
  status            Int       @default(0) @db.UnsignedTinyInt // 0未激活 | 1正常 | 2封禁
  banned_until      DateTime? // null表示未封禁
  email             String?   @unique(map: "uk_email") @db.VarChar(120)
  header_background String?   @db.VarChar(255)
  avatar            String?   @db.VarChar(255)
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  updated_at        DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  deleted_at        DateTime? @db.Timestamp(0)

  // 反向关系
  article_likes  article_likes[]
  articles       articles[]
  comments       comments[]
  logs           logs[]
  sendNotices    notices[]       @relation("NoticeFrom")
  receivedNotice notices[]       @relation("NoticeTo")
  created_tags   tags[]          @relation("TagCreator")

  @@index([status], map: "idx_status")
}

// 网站信息配置表
model config {
  k String @id @unique
  v String @db.Text
}

model link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  logo       String?   @db.VarChar(255) // 友情链接图标
  sitename   String    @db.VarChar(255) // 友情链接名称
  brief      String?   @db.VarChar(255) // 友情链接描述
  url        String    @db.VarChar(255) // 友情链接跳转url
  status     Int       @default(0) @db.UnsignedTinyInt // 0为隐藏，1为显示
  created_at DateTime  @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

// 枚举通知类型
enum NoticeType {
  SYSTEM // 系统通知
  COMMENT // 评论
  LIKE // 点赞
  ALERT // 警告|安全
  FOLLOW // ✨关注
  MESSAGE // ✨私信 
}

// 点对点通知
model notices {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  from       BigInt?    @db.UnsignedBigInt // from为空时为系统通知 | 实验性，考虑新建默认系统user 或 新建数据库表
  to         BigInt     @db.UnsignedBigInt // 接收消息的用户id
  type       NoticeType
  title      String     @db.VarChar(255)
  content    String     @db.Text
  read       Boolean    @default(false)
  created_at DateTime   @default(now())
  read_at    DateTime?

  // 关系
  sender   users? @relation("NoticeFrom", fields: [from], references: [id])
  receiver users  @relation("NoticeTo", fields: [to], references: [id])

  // 索引优化
  @@index([to, read])
  @@index([to, created_at])
  @@index([type])
}

// 文章标签
model tags {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name       String   @unique @db.VarChar(50)
  created_by BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)

  creater  users          @relation("TagCreator", fields: [created_by], references: [id])
  articles article_tags[]
}

// 关联表
model article_tags {
  article_id BigInt @db.UnsignedBigInt
  tag_id     BigInt @db.UnsignedBigInt

  // 关系
  article articles @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tag     tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([article_id, tag_id])
  @@index([article_id], map: "idx_article_id")
  @@index([tag_id], map: "idx_tag_id")
}
